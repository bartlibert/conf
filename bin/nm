#!/usr/bin/perl
use strict;
use warnings;

die "usage: $0 [module-name]" unless @ARGV == 1;

chdir "$ENV{HOME}/coding" or die "Unable to chdir $ENV{HOME}/coding";

my $name = shift;

my ($colons, $hyphens);
if ($name =~ /::/)
{
    $colons = $name;
    ($hyphens = $name) =~ s/::/-/g;
}
else
{
    $hyphens = $name;
    ($colons = $name) =~ s/-/::/g;
}

my @parts = split '-', $hyphens;
my $dir = "lib/" . join('/', @parts[0..$#parts-1]);
system("mkdir $hyphens") and die "Unable to mkdir $hyphens: $!";
chdir $hyphens;
system("mkdir -p $dir") and die "Unable to mkdir $dir: $!";
system("mkdir t") and die "Unable to mkdir t: $!";

open my $handle, '>', "$dir/$parts[-1].pm"
    or die "Unable to open $dir/$parts[-1].pm for writing: $!";
print {$handle} module_contents();
close $handle;

open $handle, '>', "t/000-load.t"
    or die "Unable to open t/000-load.t for writing: $!";
print {$handle} load_contents();
close $handle;

open $handle, '>', "t/001-basic.t"
    or die "Unable to open t/001-basic.t for writing: $!";
print {$handle} basic_contents();
close $handle;

open $handle, '>', "Makefile.PL"
    or die "Unable to open Makefile.PL for writing: $!";
print {$handle} makefile_contents();
close $handle;

open $handle, '>', "Changes"
    or die "Unable to open Changes for writing: $!";
print {$handle} changes_contents();
close $handle;

# get inc/ but not Makefile and META.yml
system('perl Makefile.PL && rm Makefile META.yml');

system('darcs init && darcs add $(darcs whatsnew -ls | perl -ple "s/^a //") && darcs record -a -m"Initial import of '.$colons.'"');
system("darcs put tozt.net:public_html/code/$hyphens");

open $handle, '>>', "_darcs/prefs/boring"
    or die "Unable to open _darcs/prefs/boring for writing: $!";
print {$handle} boring_contents();
close $handle;

sub changes_contents
{
    my $time = localtime;
    return << "CHANGES";
Revision history for $hyphens

0.01    $time
        First version, released on an unsuspecting world.

CHANGES
}

sub boring_contents
{
    return << 'BORING';
(^|/)blib($|/)
(^|/)log/.
(^|/)inc($|/)
(^|/)etc/site_config\.yml$
(^|/)Makefile$
(^|/)Makefile\.old$
(^|/)META\.yml$
(^|/)pm_to_blib$
BORING
}

sub makefile_contents
{
    return << "MAKEFILE";
# Load the Module::Install bundled in ./inc/
use inc::Module::Install;

# Define metadata
name           '$hyphens';
all_from       '$dir/$parts[-1].pm';

requires       '';

build_requires 'Test::More';

WriteAll;

MAKEFILE
}

sub basic_contents
{
    return << "TEST";
#!perl -T
use strict;
use warnings;
use Test::More tests => 1;
use $colons;

ok(1);

TEST
}

sub load_contents
{
    return << "TEST";
#!perl -T
use strict;
use warnings;
use Test::More tests => 1;

use_ok '$colons';

TEST
}

sub module_contents
{
    return << "MODULE";
#!perl
package $colons;
use strict;
use warnings;



=head1 NAME

$colons - ???

=head1 VERSION

Version 0.01 released ???

=cut

our \$VERSION = '0.01';

=head1 SYNOPSIS

    use $colons;
    do_stuff();

=head1 DESCRIPTION



=head1 SEE ALSO

L<Foo::Bar>

=head1 AUTHOR

Jesse Luehrs, C<< <jluehrs2 at uiuc.edu> >>

=head1 BUGS

No known bugs.

Please report any bugs through RT: email
C<bug-\L$hyphens\E at rt.cpan.org>, or browse
L<http://rt.cpan.org/NoAuth/ReportBug.html?Queue=$hyphens>.

=head1 SUPPORT

You can find this documentation for this module with the perldoc command.

    perldoc $colons

You can also look for information at:

=over 4

=item * AnnoCPAN: Annotated CPAN documentation

L<http://annocpan.org/dist/$hyphens>

=item * CPAN Ratings

L<http://cpanratings.perl.org/d/$hyphens>

=item * RT: CPAN's request tracker

L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=$hyphens>

=item * Search CPAN

L<http://search.cpan.org/dist/$hyphens>

=back

=head1 COPYRIGHT AND LICENSE

Copyright 2008 Jesse Luehrs.

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

1;

MODULE
}

